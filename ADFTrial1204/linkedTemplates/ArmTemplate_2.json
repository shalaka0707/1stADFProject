{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFTrial1204"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/plDeleteActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Note",
								"value": "All text files deleted from ToDelete Folder"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "DeleteFileDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linkedservice_trial",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.txt",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-17T17:27:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plLatestUpdatedFileFromBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Inputforeachloop_array",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "dsBlobStorageCSV",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(formatDateTime(activity('Get Metadata2').output.lastModified,'yyyyMMddHHmmss'),formatDateTime(variables('tempDate'),'yyyyMMddHHmmss'))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileName",
													"value": {
														"value": "@activity('Get Metadata2').output.itemName",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "tempDate",
													"value": {
														"value": "@activity('Get Metadata2').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LastModidiedFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastModifiedFile",
							"value": {
								"value": "@variables('FileName')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"tempDate": {
						"type": "String",
						"defaultValue": "2000-04-25T16:29:52Z"
					},
					"FileName": {
						"type": "String"
					},
					"LastModifiedFile": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T15:51:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plUntilActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('fileExistsFlag'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "dsInputFolderText",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileExistsFlag",
										"value": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileExistsFlag": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-17T05:23:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plValidationSwitchWebMailActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch based on output folder",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.folderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "output",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "dsInputFolderText",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "dsOutputBlob",
													"type": "DatasetReference",
													"parameters": {
														"singleFolderName": {
															"value": "@pipeline().parameters.folderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "ToDelete",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "inputDataset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "dsOutputBlob",
													"type": "DatasetReference",
													"parameters": {
														"singleFolderName": {
															"value": "@pipeline().parameters.folderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dsInputFolderText",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:00:10",
							"sleep": 10
						}
					},
					{
						"name": "Send Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-24.southindia.logic.azure.com:443/workflows/8bc21be9de89401487a152bb3cdb2894/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=EXhjHsQNSQmAavg2n3X4yrCQ-qNzUrvKamRByWuJ2VE",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"title\":\"PIPELINE RUN FINISHED\",\n    \"Message\":\"Fail\",\n    \"color\":\"Red\",\n    \"dataFactoryName\":\"@{pipeline().DataFactory}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-28T00:31:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_foreachloop_array')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Inputforeachloop_array",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@endswith(item().name,'.csv')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFolderPath": "input",
															"wildcardFileName": {
																"value": "@item().Name",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_Inputforeachloop_array",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_outputforeachactivity",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Append variable2",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "allFileNames",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Append variable2",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileName",
													"value": {
														"value": "@variables('allFileNames')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"allFileNames": {
						"type": "Array"
					},
					"fileName": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-15T18:11:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_repeatForAppendFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Inputforeachloop_array",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name,'my')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFolderPath": "input",
															"wildcardFileName": {
																"value": "@item().name",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_Inputforeachloop_array",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_outputforeachactivity",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Append variable1",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "tempFileName",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Append variable1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "allFileNames",
													"value": {
														"value": "@variables('tempFileName')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"allFileNames": {
						"type": "Array"
					},
					"tempFileName": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T01:05:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_testVariable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set var1 as type of the file",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileType",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If FileType is equal to Hourly",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set var1 as type of the file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(variables('FileType'), 'hourly')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "blob to daily",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "adftrial/input/"
										},
										{
											"name": "Destination",
											"value": "adftrial/output/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "input",
												"wildcardFileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_testVariableSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_testVariableDest",
											"type": "DatasetReference",
											"parameters": {
												"ds_FileName": {
													"value": "@concat(replace(pipeline().parameters.FileName,'.csv',''),'_',utcnow(),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "blob to hourly",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "input",
												"wildcardFileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_testVariableSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_testVariableDest",
											"type": "DatasetReference",
											"parameters": {
												"ds_FileName": {
													"value": "@concat(replace(pipeline().parameters.FileName,'.csv',''),'_',utcnow(),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileType": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-15T04:09:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsLocalSQLDept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnSqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DeptID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeptName",
						"type": "nvarchar"
					},
					{
						"name": "Location",
						"type": "nvarchar"
					},
					{
						"name": "DeptHead",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblDepartment"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsLocalSQLEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnSqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Salary",
						"type": "nvarchar"
					},
					{
						"name": "DeptID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ManagerID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsOutputtRegionTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnSqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsRegionsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnSqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SrNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PersonId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PersonName",
						"type": "varchar"
					},
					{
						"name": "RegionName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "regions"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsSqlServerCarsTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnSqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Car",
						"type": "nvarchar"
					},
					{
						"name": "Make",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Seater",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Mileage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cars"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpWithDepatName')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsEmployeeCSV",
								"type": "DatasetReference"
							},
							"name": "EmployeeCSV"
						},
						{
							"dataset": {
								"referenceName": "dsDepartmentCsv",
								"type": "DatasetReference"
							},
							"name": "DepartmentCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsDataflowOutputCSV",
								"type": "DatasetReference"
							},
							"name": "EmpWithDepatName"
						},
						{
							"dataset": {
								"referenceName": "dsDataflowOutputCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "InnerJoin"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filterFor"
						},
						{
							"name": "AggregateOnDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          DeptID as string,",
						"          ManagerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeCSV",
						"source(output(",
						"          DeptID as string,",
						"          DeptName as string,",
						"          Location as string,",
						"          DeptHead as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepartmentCSV",
						"derivedColumn1, DepartmentCSV join(EmployeeCSV@DeptID == DepartmentCSV@DeptID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> InnerJoin",
						"EmployeeCSV derive(FirstName = left(Name,locate(' ',Name)-1),",
						"          LastName = right(Name,length(Name)-locate(' ',Name))) ~> derivedColumn1",
						"InnerJoin filter(equals(DeptName,'Finance') || equals(DeptName,'HR')) ~> filterFor",
						"filterFor aggregate(groupBy(DeptName),",
						"     NoOfEmployees = count(Id)) ~> AggregateOnDept",
						"InnerJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmpDept.CSV'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Id,",
						"          FirstName,",
						"          LastName,",
						"          Salary,",
						"          DeptName",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmpWithDepatName",
						"AggregateOnDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesByDeptName'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DeptName,",
						"          NoOfEmployees",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoodDataBadData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsErrorSalesFile",
								"type": "DatasetReference"
							},
							"name": "errorSalesCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "lnErrorTable",
								"type": "DatasetReference"
							},
							"name": "uploadToErrorRecordTable"
						},
						{
							"dataset": {
								"referenceName": "dsGoodtable",
								"type": "DatasetReference"
							},
							"name": "UploadtoGoodtable"
						}
					],
					"transformations": [
						{
							"name": "conditionSplitForerrorRecords"
						},
						{
							"name": "FileNameColumn"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SrNo as short,",
						"          SaleDate as string,",
						"          ProductNam as string,",
						"          Qty as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> errorSalesCSV",
						"errorSalesCSV split(isNull(toDate(SaleDate,'dd-MMM-yyyy')),",
						"     disjoint: false) ~> conditionSplitForerrorRecords@(errorrecords, GoodRecords)",
						"conditionSplitForerrorRecords@errorrecords derive(FileName = 'Sales.csv') ~> FileNameColumn",
						"conditionSplitForerrorRecords@GoodRecords derive(FileName = 'Sales.csv',",
						"          SaleDate = toDate(SaleDate,'dd-MMM-yyyy')) ~> derivedColumn1",
						"FileNameColumn sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          SrNo as integer,",
						"          SaleDate as string,",
						"          ProductNam as string,",
						"          Qty as string,",
						"          FileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SrNo,",
						"          SaleDate,",
						"          ProductNam,",
						"          Qty,",
						"          FileName",
						"     )) ~> uploadToErrorRecordTable",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SrNo as integer,",
						"          SaleDate as date,",
						"          ProductNam as string,",
						"          Qty as integer,",
						"          FileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SrNo,",
						"          SaleDate,",
						"          ProductNam,",
						"          Qty,",
						"          FileName",
						"     )) ~> UploadtoGoodtable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HashValue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsCarsAdls",
								"type": "DatasetReference"
							},
							"name": "SourceCarsCSV"
						},
						{
							"dataset": {
								"referenceName": "dsAzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "TargetCarsTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsAzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "HashKeySource"
						},
						{
							"name": "HashKeyTarget"
						},
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Car as string,",
						"          Make as integer,",
						"          Mileage as integer,",
						"          Seater as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCarsCSV",
						"source(output(",
						"          Car as string,",
						"          Make as integer,",
						"          Seater as integer,",
						"          Mileage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TargetCarsTable",
						"SourceCarsCSV derive(HashKey = sha2(256,columns())) ~> HashKeySource",
						"TargetCarsTable derive(HashKeyTarget = sha2(256,columns())) ~> HashKeyTarget",
						"HashKeySource, HashKeyTarget exists(HashKey == HashKeyTarget,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Car as string,",
						"          Make as integer,",
						"          Seater as integer,",
						"          Mileage as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Car,",
						"          Make,",
						"          Seater,",
						"          Mileage",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsPerson1",
								"type": "DatasetReference"
							},
							"name": "Person1"
						},
						{
							"dataset": {
								"referenceName": "dsPerson2",
								"type": "DatasetReference"
							},
							"name": "Person2"
						},
						{
							"dataset": {
								"referenceName": "dsPerson3",
								"type": "DatasetReference"
							},
							"name": "Person3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dsBlobStorageCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unionOfPerson1AndPerson2"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "calculateMaxSrNo"
						},
						{
							"name": "JoinwithMaxId"
						},
						{
							"name": "surrogateKey2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SrNo as long,",
						"          PersonId as string,",
						"          Person as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Person1",
						"source(output(",
						"          SrNo as long,",
						"          PersonId as string,",
						"          Person as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Person2",
						"source(output(",
						"          PersonId as string,",
						"          Person as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Person3",
						"Person1, Person2 union(byName: false)~> unionOfPerson1AndPerson2",
						"unionOfPerson1AndPerson2 aggregate(groupBy(PersonId),",
						"     each(match(name!='PersonId'), $$ = first($$))) ~> aggregate1",
						"aggregate1 sort(asc(SrNo, true)) ~> sort1",
						"sort1 aggregate(MaxId = max(SrNo)) ~> calculateMaxSrNo",
						"Person3, calculateMaxSrNo join(1==1,",
						"     joinType:'cross',",
						"     broadcast: 'auto')~> JoinwithMaxId",
						"JoinwithMaxId keyGenerate(output(Id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey2",
						"surrogateKey2 derive(id = toString(toInteger(Id)+toInteger(MaxId))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Car as string,",
						"          Make as string,",
						"          Mileage as string,",
						"          Seater as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoodAndBadData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GoodDataBadData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"errorSalesCSV": {
										"FileName": "sales.csv"
									},
									"uploadToErrorRecordTable": {},
									"UploadtoGoodtable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-25T10:00:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GoodDataBadData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupCopyToMultipleTables2504')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select distinct(RegionName) from regions",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dsRegionsTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyToBlobToCSV",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from regions where RegionName = '@{item().RegionName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dsOutputtRegionTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().RegionName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dsLookupMultipleRegion",
											"type": "DatasetReference",
											"parameters": {
												"RegionName": {
													"value": "@concat(item().RegionName,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "CopyDataToEachRegionalTable",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CopyToBlobToCSV",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from regions where RegionName = '@{item().RegionName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dsRegionsTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dsOutputtRegionTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().RegionName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-27T00:34:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsRegionsTable')]",
				"[concat(variables('factoryId'), '/datasets/dsOutputtRegionTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/haskKeyCompareRows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "HashValue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCarsCSV": {},
									"TargetCarsTable": {
										"tableName": "cars"
									},
									"sink1": {
										"tableName": "cars"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-28T03:26:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/HashValue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCSVtoParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsAdlsCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsOutputCsvToParque",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Output",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsOutputCsvToParque",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsSqlServerCarsTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-28T03:26:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsSqlServerCarsTable1')]"
			]
		}
	]
}