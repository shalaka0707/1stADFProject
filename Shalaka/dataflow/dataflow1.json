{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsPerson1",
						"type": "DatasetReference"
					},
					"name": "Person1"
				},
				{
					"dataset": {
						"referenceName": "dsPerson2",
						"type": "DatasetReference"
					},
					"name": "Person2"
				},
				{
					"dataset": {
						"referenceName": "dsPerson3",
						"type": "DatasetReference"
					},
					"name": "Person3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsBlobStorageCSV",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unionOfPerson1AndPerson2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "calculateMaxSrNo"
				},
				{
					"name": "JoinwithMaxId"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SrNo as long,",
				"          PersonId as string,",
				"          Person as string,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Person1",
				"source(output(",
				"          SrNo as long,",
				"          PersonId as string,",
				"          Person as string,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Person2",
				"source(output(",
				"          PersonId as string,",
				"          Person as string,",
				"          Region as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Person3",
				"Person1, Person2 union(byName: false)~> unionOfPerson1AndPerson2",
				"unionOfPerson1AndPerson2 aggregate(groupBy(PersonId),",
				"     each(match(name!='PersonId'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sort(asc(SrNo, true)) ~> sort1",
				"sort1 aggregate(MaxId = max(SrNo)) ~> calculateMaxSrNo",
				"Person3, calculateMaxSrNo join(1==1,",
				"     joinType:'cross',",
				"     broadcast: 'auto')~> JoinwithMaxId",
				"JoinwithMaxId keyGenerate(output(Id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 derive(id = toString(toInteger(Id)+toInteger(MaxId))) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Car as string,",
				"          Make as string,",
				"          Mileage as string,",
				"          Seater as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}